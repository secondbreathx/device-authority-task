package com.authority.device.service;import com.authority.device.exception.DeviceAuthorityManagerException;import com.authority.device.mapper.DeviceMapper;import com.authority.device.model.Device;import com.authority.device.payload.request.DeviceRequest;import com.authority.device.payload.response.DeviceResponse;import com.authority.device.repository.DeviceRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.time.ZonedDateTime;import java.util.List;import java.util.UUID;import java.util.stream.Collectors;import static com.authority.device.exception.ErrorType.DEVICE_NOT_FOUND;import static com.authority.device.exception.ErrorType.EXIST_DEVICE;@Servicepublic class DeviceService {    @Autowired    private DeviceRepository deviceRepository;   @Autowired   private DeviceMapper deviceMapper;    public List<DeviceResponse> getAllActiveDevices() {        List<Device> activeDevices = deviceRepository.findByState(1);        return activeDevices.stream()                .map(deviceMapper::toDeviceResponse)                .collect(Collectors.collectingAndThen(Collectors.toList(), devices -> {                    if (devices.isEmpty()) {                        throw new DeviceAuthorityManagerException(DEVICE_NOT_FOUND);                    }                    return devices;                }));    }    public DeviceResponse addDevice(DeviceRequest deviceRequest) {        deviceRepository.findByDeviceId(deviceRequest.getDeviceId())                .ifPresent(existingDevice -> {                    throw new DeviceAuthorityManagerException(EXIST_DEVICE);                });        Device device = deviceMapper.toDevice(deviceRequest);        device.setDeviceId(String.valueOf(UUID.randomUUID()));        device.setState(1);        device.setCreationTime(ZonedDateTime.now());        Device savedDevice = deviceRepository.save(device);        return deviceMapper.toDeviceResponse(savedDevice);    }    public DeviceResponse updateDevice(String deviceId, DeviceRequest deviceRequest) {        return deviceRepository.findByDeviceId(deviceId)                .map(existingDevice -> {                    existingDevice.setPlatform(deviceRequest.getPlatform());                    existingDevice.setOsName(deviceRequest.getOsName());                    existingDevice.setOsVersion(deviceRequest.getOsVersion());                    existingDevice.setUpdateTime(ZonedDateTime.now());                    Device updatedDevice = deviceRepository.save(existingDevice);                    return deviceMapper.toDeviceResponse(updatedDevice);                })                .orElseThrow(() -> new DeviceAuthorityManagerException(DEVICE_NOT_FOUND));    }    public void deleteDevice(String deviceId) {        deviceRepository.findByDeviceId(deviceId)                .ifPresentOrElse(existingDevice -> {                            existingDevice.setState(0);deviceRepository.save(existingDevice);                            }, () -> {                            throw new DeviceAuthorityManagerException(DEVICE_NOT_FOUND);                        }                );    }}